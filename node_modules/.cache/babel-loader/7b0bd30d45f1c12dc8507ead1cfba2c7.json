{"ast":null,"code":"var _jsxFileName = \"/Users/kevinlam/Desktop/Fullstack Academy of Code/Personal_Projects/codenames/src/components/Game.js\";\nimport React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport io from \"socket.io-client\";\nimport Board from \"./Board\";\nimport CodeNames from '../images/Kodonemu.png';\nimport { connect } from \"react-redux\";\nimport { changeRole } from \"../store/actions/userOptionsActions\";\nimport { updateGame, loadGame, startNewGame, endTurn, cardClick } from \"../store/actions/gameActions\";\nimport { socketUrl } from \"../config/serverUrl\";\n\nconst stateMap = store => {\n  return store;\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Game name from the URL\n      gameName: window.location.pathname.split(\"/\")[1].toLowerCase(),\n      // Websocket to receive data from the server\n      socket: io.connect(socketUrl)\n    };\n    this.newGame = this.newGame.bind(this);\n    this.endTurn = this.endTurn.bind(this);\n    this.changeRole = this.changeRole.bind(this);\n    this.loadGame = this.loadGame.bind(this);\n    this.updateGame = this.updateGame.bind(this); // Socket room and connection\n\n    this.state.socket.emit('joinRoom', this.state.gameName); // this.state.socket.on('updateGame', (game) => {\n    //   this.updateGame(game)\n    // });\n\n    this.loadGame(this.state.gameName);\n  }\n\n  componentDidMount() {\n    // console.log('THIS STATE SOCKET', this.state.socket);\n    // this.state.socket.emit('updateGame', 'updategame this state component mount.');\n    this.state.socket.on('updateGame', data => {\n      this.updateGame(data);\n    });\n  }\n\n  render() {\n    const winner = this.props.game.winner;\n    let status = \"\";\n    let playingTeam = this.props.game.blueTurn ? \"blue\" : \"red\";\n    let playingTeamColor = playingTeam;\n\n    if (winner) {\n      status = winner.toUpperCase() + \" TEAM WINS!\";\n    } else {\n      status = (this.props.game.blueTurn ? \"BLUE\" : \"RED\") + \" Team's turn!\";\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.options.role === \"Spymaster\" ? \"spymaster\" : \"player\",\n      id: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"App-logo\",\n      src: CodeNames,\n      alt: \"CodeNames Logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        fontFamily: \"Courier New,monospace\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, \"ROOM NAME : \", this.state.gameName.toUpperCase()), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, \"Share this link with your friends to play together:\", /*#__PURE__*/React.createElement(Link, {\n      to: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, window.location.href)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"top-bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"end-turn\",\n      className: \"button\",\n      onClick: this.endTurn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, \"End \", playingTeam.toUpperCase(), \" team's turn\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"status\",\n      className: playingTeamColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, status), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"switch\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: this.props.options.role === \"Spymaster\" ? \"Player\" : \"Spymaster\",\n      onChange: this.changeRole,\n      checked: this.props.options.role === \"Spymaster\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"slider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, this.props.options.role === \"Spymaster\" ? \" I am the Spymaster!\" : \" Spymaster\")), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"next-game\",\n      className: \"button\",\n      onClick: this.newGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, \"New Game!\"))), /*#__PURE__*/React.createElement(Board, {\n      cards: this.props.game.cards,\n      cardClick: i => this.cardClick(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    })));\n  }\n  /* Helper/dispatch functions */\n\n  /* Client actions */\n  // Score CSS classes and info\n\n\n  createScoreboard() {\n    let firstTeamColor;\n    let firstTeamScore;\n    let secondTeamColor;\n    let secondTeamScore;\n\n    if (this.props.game.blueTeamFirst) {\n      firstTeamColor = \"blue\";\n      firstTeamScore = this.props.game.blueCards;\n      secondTeamColor = \"red\";\n      secondTeamScore = this.props.game.redCards;\n    } else {\n      firstTeamColor = \"red\";\n      firstTeamScore = this.props.game.redCards;\n      secondTeamColor = \"blue\";\n      secondTeamScore = this.props.game.blueCards;\n    }\n\n    return {\n      firstTeamColor,\n      firstTeamScore,\n      secondTeamColor,\n      secondTeamScore\n    };\n  }\n\n  changeRole(event) {\n    let el = event.target;\n    this.props.dispatch(changeRole(el.value));\n  }\n  /* Server actions */\n\n\n  loadGame(gameName) {\n    this.props.dispatch(loadGame(gameName));\n  }\n\n  updateGame(game) {\n    this.props.dispatch(updateGame(game));\n  }\n\n  newGame() {\n    this.props.dispatch(startNewGame(this.props.game.gameName));\n  }\n\n  cardClick(cardIndex) {\n    const teamClicked = this.props.game.blueTurn ? \"Blue\" : \"Red\";\n    this.props.dispatch(cardClick(this.props.game.gameName, cardIndex, teamClicked));\n  }\n\n  endTurn() {\n    this.props.dispatch(endTurn(this.props.game.gameName));\n  }\n\n}\n\nexport default connect(stateMap)(Game);","map":{"version":3,"sources":["/Users/kevinlam/Desktop/Fullstack Academy of Code/Personal_Projects/codenames/src/components/Game.js"],"names":["React","Component","Link","io","Board","CodeNames","connect","changeRole","updateGame","loadGame","startNewGame","endTurn","cardClick","socketUrl","stateMap","store","Game","constructor","props","state","gameName","window","location","pathname","split","toLowerCase","socket","newGame","bind","emit","componentDidMount","on","data","render","winner","game","status","playingTeam","blueTurn","playingTeamColor","toUpperCase","options","role","fontFamily","href","cards","i","createScoreboard","firstTeamColor","firstTeamScore","secondTeamColor","secondTeamScore","blueTeamFirst","blueCards","redCards","event","el","target","dispatch","value","cardIndex","teamClicked"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Link} from 'react-router-dom';\nimport io from \"socket.io-client\";\n\nimport Board from \"./Board\";\nimport CodeNames from '../images/Kodonemu.png'\nimport { connect } from \"react-redux\";\n\nimport { changeRole } from \"../store/actions/userOptionsActions\";\nimport {\n  updateGame,\n  loadGame,\n  startNewGame,\n  endTurn,\n  cardClick,\n} from \"../store/actions/gameActions\";\nimport { socketUrl } from \"../config/serverUrl\";\n\nconst stateMap = (store) => {\n  return store;\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Game name from the URL\n      gameName: window.location.pathname.split(\"/\")[1].toLowerCase(),\n\n      // Websocket to receive data from the server\n      socket: io.connect(socketUrl),\n    };\n\n    this.newGame = this.newGame.bind(this);\n    this.endTurn = this.endTurn.bind(this);\n    this.changeRole = this.changeRole.bind(this);\n    this.loadGame = this.loadGame.bind(this);\n    this.updateGame = this.updateGame.bind(this)\n\n    // Socket room and connection\n    this.state.socket.emit('joinRoom', this.state.gameName);\n\n    // this.state.socket.on('updateGame', (game) => {\n    //   this.updateGame(game)\n    // });\n\n    this.loadGame(this.state.gameName);\n  }\n\n  componentDidMount(){\n    // console.log('THIS STATE SOCKET', this.state.socket);\n    // this.state.socket.emit('updateGame', 'updategame this state component mount.');\n    this.state.socket.on('updateGame', (data) => {\n      this.updateGame(data)\n    });\n  }\n\n\n  render() {\n    const winner = this.props.game.winner;\n    let status = \"\";\n    let playingTeam = this.props.game.blueTurn ? \"blue\" : \"red\";\n    let playingTeamColor = playingTeam;\n\n    if (winner) {\n      status = winner.toUpperCase() + \" TEAM WINS!\";\n    } else {\n      status = (this.props.game.blueTurn ? \"BLUE\" : \"RED\") + \" Team's turn!\";\n    }\n\n    return (\n      <div\n        className={\n          this.props.options.role === \"Spymaster\" ? \"spymaster\" : \"player\"\n        }\n        id=\"game\"\n      >\n        <div id=\"board\">\n        <img className=\"App-logo\" src={CodeNames} alt=\"CodeNames Logo\"></img>\n          <h2 style={{ fontFamily: \"Courier New,monospace\" }}>\n            ROOM NAME : {this.state.gameName.toUpperCase()}\n          </h2>\n          <p>\n            Share this link with your friends to play together:\n            <Link to=\"\">{window.location.href}</Link>\n          </p>\n\n          <div id=\"top-bar\">\n            <div>\n              <button id=\"end-turn\" className=\"button\" onClick={this.endTurn}>\n                End {playingTeam.toUpperCase()} team's turn\n              </button>\n            </div>\n            <div id=\"status\" className={playingTeamColor}>\n              {status}\n            </div>\n            <div>\n              <label className=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  value={\n                    this.props.options.role === \"Spymaster\"\n                      ? \"Player\"\n                      : \"Spymaster\"\n                  }\n                  onChange={this.changeRole}\n                  checked={this.props.options.role === \"Spymaster\"}\n                />\n                <span className=\"slider\">\n                  {this.props.options.role === \"Spymaster\"\n                    ? \" I am the Spymaster!\"\n                    : \" Spymaster\"}\n                </span>\n              </label>\n              <button id=\"next-game\" className=\"button\" onClick={this.newGame}>\n                New Game!\n              </button>\n            </div>\n          </div>\n\n          <Board\n            cards={this.props.game.cards}\n            cardClick={(i) => this.cardClick(i)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  /* Helper/dispatch functions */\n  /* Client actions */\n  // Score CSS classes and info\n  createScoreboard() {\n    let firstTeamColor;\n    let firstTeamScore;\n    let secondTeamColor;\n    let secondTeamScore;\n    if (this.props.game.blueTeamFirst) {\n      firstTeamColor = \"blue\";\n      firstTeamScore = this.props.game.blueCards;\n      secondTeamColor = \"red\";\n      secondTeamScore = this.props.game.redCards;\n    } else {\n      firstTeamColor = \"red\";\n      firstTeamScore = this.props.game.redCards;\n      secondTeamColor = \"blue\";\n      secondTeamScore = this.props.game.blueCards;\n    }\n\n    return {\n      firstTeamColor,\n      firstTeamScore,\n      secondTeamColor,\n      secondTeamScore,\n    };\n  }\n\n  changeRole(event) {\n    let el = event.target;\n\n    this.props.dispatch(changeRole(el.value));\n  }\n\n  /* Server actions */\n  loadGame(gameName) {\n    this.props.dispatch(loadGame(gameName));\n  }\n\n  updateGame(game) {\n    this.props.dispatch(updateGame(game))\n  }\n\n  newGame() {\n    this.props.dispatch(startNewGame(this.props.game.gameName));\n  }\n\n  cardClick(cardIndex) {\n    const teamClicked = this.props.game.blueTurn ? \"Blue\" : \"Red\";\n    this.props.dispatch(cardClick(this.props.game.gameName, cardIndex, teamClicked));\n  }\n\n  endTurn() {\n    this.props.dispatch(endTurn(this.props.game.gameName));\n  }\n}\n\nexport default connect(stateMap)(Game);\n"]},"metadata":{},"sourceType":"module"}