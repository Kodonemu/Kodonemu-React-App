{"ast":null,"code":"import _classCallCheck from\"/Users/kevinlam/Desktop/Fullstack Academy of Code/Personal_Projects/codenames/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/kevinlam/Desktop/Fullstack Academy of Code/Personal_Projects/codenames/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/kevinlam/Desktop/Fullstack Academy of Code/Personal_Projects/codenames/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/kevinlam/Desktop/Fullstack Academy of Code/Personal_Projects/codenames/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/kevinlam/Desktop/Fullstack Academy of Code/Personal_Projects/codenames/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{Link}from'react-router-dom';import io from\"socket.io-client\";import Board from\"./Board\";import CodeNames from'../images/CodeNames.png';import{connect}from\"react-redux\";import{changeRole as _changeRole}from\"../actions/userOptionsActions\";import{updateGame,loadGame as _loadGame,startNewGame,endTurn as _endTurn,cardClick as _cardClick}from\"../actions/gameActions\";import{socketUrl}from\"../config/serverUrl\";var stateMap=function stateMap(store){return store;};var Game=/*#__PURE__*/function(_Component){_inherits(Game,_Component);var _super=_createSuper(Game);function Game(props){var _this;_classCallCheck(this,Game);_this=_super.call(this,props);_this.state={// Game name from the URL\ngameName:window.location.pathname.split(\"/\")[1].toLowerCase(),// Websocket to receive data from the server\nsocket:io.connect(socketUrl)};_this.newGame=_this.newGame.bind(_assertThisInitialized(_this));_this.endTurn=_this.endTurn.bind(_assertThisInitialized(_this));_this.changeRole=_this.changeRole.bind(_assertThisInitialized(_this));_this.loadGame=_this.loadGame.bind(_assertThisInitialized(_this));// Socket room and connection\n_this.state.socket.emit(\"joinRoom\",_this.state.gameName);_this.state.socket.on(\"updateGame\",function(game){return props.dispatch(updateGame(game));});_this.loadGame(_this.state.gameName);return _this;}_createClass(Game,[{key:\"render\",value:function render(){var _this2=this;var winner=this.props.game.winner;var status=\"\";var playingTeam=this.props.game.blueTurn?\"blue\":\"red\";var playingTeamColor=playingTeam;if(winner){status=winner.toUpperCase()+\" TEAM WINS!\";}else{status=(this.props.game.blueTurn?\"BLUE\":\"RED\")+\" Team's turn!\";}return/*#__PURE__*/React.createElement(\"div\",{className:this.props.options.role===\"Spymaster\"?\"spymaster\":\"player\",id:\"game\"},/*#__PURE__*/React.createElement(\"div\",{id:\"board\"},/*#__PURE__*/React.createElement(\"img\",{className:\"App-logo\",src:CodeNames,alt:\"CodeNames Logo\"}),/*#__PURE__*/React.createElement(\"h2\",{style:{fontFamily:\"Courier New,monospace\"}},\"Room Name : \",this.state.gameName.toUpperCase()),/*#__PURE__*/React.createElement(\"p\",null,\"Share this link with your friends to play together:\",/*#__PURE__*/React.createElement(Link,null,\" www.codenames.com/\",this.state.gameName)),/*#__PURE__*/React.createElement(\"div\",{id:\"top-bar\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{id:\"end-turn\",className:\"button\",onClick:this.endTurn},\"End \",playingTeam.toUpperCase(),\" team's turn\")),/*#__PURE__*/React.createElement(\"div\",{id:\"status\",className:playingTeamColor},status),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"label\",{className:\"switch\"},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",value:this.props.options.role===\"Spymaster\"?\"Player\":\"Spymaster\",onChange:this.changeRole,checked:this.props.options.role===\"Spymaster\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"slider\"},this.props.options.role===\"Spymaster\"?\" I am the Spymaster!\":\" Spymaster\")),/*#__PURE__*/React.createElement(\"button\",{id:\"next-game\",className:\"button\",onClick:this.newGame},\"New Game!\"))),/*#__PURE__*/React.createElement(Board,{cards:this.props.game.cards,cardClick:function cardClick(i){return _this2.cardClick(i);}})));}/* Helper/dispatch functions */ /* Client actions */ // Score CSS classes and info\n},{key:\"createScoreboard\",value:function createScoreboard(){var firstTeamColor;var firstTeamScore;var secondTeamColor;var secondTeamScore;if(this.props.game.blueTeamFirst){firstTeamColor=\"blue\";firstTeamScore=this.props.game.blueCards;secondTeamColor=\"red\";secondTeamScore=this.props.game.redCards;}else{firstTeamColor=\"red\";firstTeamScore=this.props.game.redCards;secondTeamColor=\"blue\";secondTeamScore=this.props.game.blueCards;}return{firstTeamColor:firstTeamColor,firstTeamScore:firstTeamScore,secondTeamColor:secondTeamColor,secondTeamScore:secondTeamScore};}},{key:\"changeRole\",value:function changeRole(event){var el=event.target;this.props.dispatch(_changeRole(el.value));}/* Server actions */},{key:\"loadGame\",value:function loadGame(gameName){this.props.dispatch(_loadGame(gameName));}},{key:\"newGame\",value:function newGame(){this.props.dispatch(startNewGame(this.props.game.gameName));}},{key:\"cardClick\",value:function cardClick(cardIndex){var teamClicked=this.props.game.blueTurn?\"Blue\":\"Red\";this.props.dispatch(_cardClick(this.props.game.gameName,cardIndex,teamClicked));}},{key:\"endTurn\",value:function endTurn(){this.props.dispatch(_endTurn(this.props.game.gameName));}}]);return Game;}(Component);export default connect(stateMap)(Game);","map":{"version":3,"sources":["/Users/kevinlam/Desktop/Fullstack Academy of Code/Personal_Projects/codenames/src/components/Game.js"],"names":["React","Component","Link","io","Board","CodeNames","connect","changeRole","updateGame","loadGame","startNewGame","endTurn","cardClick","socketUrl","stateMap","store","Game","props","state","gameName","window","location","pathname","split","toLowerCase","socket","newGame","bind","emit","on","game","dispatch","winner","status","playingTeam","blueTurn","playingTeamColor","toUpperCase","options","role","fontFamily","cards","i","firstTeamColor","firstTeamScore","secondTeamColor","secondTeamScore","blueTeamFirst","blueCards","redCards","event","el","target","value","cardIndex","teamClicked"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Link} from 'react-router-dom';\nimport io from \"socket.io-client\";\n\nimport Board from \"./Board\";\nimport CodeNames from '../images/CodeNames.png'\nimport { connect } from \"react-redux\";\n\nimport { changeRole } from \"../actions/userOptionsActions\";\nimport {\n  updateGame,\n  loadGame,\n  startNewGame,\n  endTurn,\n  cardClick,\n} from \"../actions/gameActions\";\nimport { socketUrl } from \"../config/serverUrl\";\n\nconst stateMap = (store) => {\n  return store;\n};\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Game name from the URL\n      gameName: window.location.pathname.split(\"/\")[1].toLowerCase(),\n\n      // Websocket to receive data from the server\n      socket: io.connect(socketUrl),\n    };\n\n    this.newGame = this.newGame.bind(this);\n    this.endTurn = this.endTurn.bind(this);\n    this.changeRole = this.changeRole.bind(this);\n    this.loadGame = this.loadGame.bind(this);\n\n    // Socket room and connection\n    this.state.socket.emit(\"joinRoom\", this.state.gameName);\n\n    this.state.socket.on(\"updateGame\", (game) =>\n      props.dispatch(updateGame(game))\n    );\n\n    this.loadGame(this.state.gameName);\n  }\n\n  render() {\n    const winner = this.props.game.winner;\n    let status = \"\";\n    let playingTeam = this.props.game.blueTurn ? \"blue\" : \"red\";\n    let playingTeamColor = playingTeam;\n\n    if (winner) {\n      status = winner.toUpperCase() + \" TEAM WINS!\";\n    } else {\n      status = (this.props.game.blueTurn ? \"BLUE\" : \"RED\") + \" Team's turn!\";\n    }\n\n    return (\n      <div\n        className={\n          this.props.options.role === \"Spymaster\" ? \"spymaster\" : \"player\"\n        }\n        id=\"game\"\n      >\n        <div id=\"board\">\n        <img className=\"App-logo\" src={CodeNames} alt=\"CodeNames Logo\"></img>\n          <h2 style={{ fontFamily: \"Courier New,monospace\" }}>\n            Room Name : {this.state.gameName.toUpperCase()}\n          </h2>\n          <p>\n            Share this link with your friends to play together:\n            <Link> www.codenames.com/{this.state.gameName}</Link>\n          </p>\n\n          <div id=\"top-bar\">\n            <div>\n              <button id=\"end-turn\" className=\"button\" onClick={this.endTurn}>\n                End {playingTeam.toUpperCase()} team's turn\n              </button>\n            </div>\n            <div id=\"status\" className={playingTeamColor}>\n              {status}\n            </div>\n            <div>\n              <label className=\"switch\">\n                <input\n                  type=\"checkbox\"\n                  value={\n                    this.props.options.role === \"Spymaster\"\n                      ? \"Player\"\n                      : \"Spymaster\"\n                  }\n                  onChange={this.changeRole}\n                  checked={this.props.options.role === \"Spymaster\"}\n                />\n                <span className=\"slider\">\n                  {this.props.options.role === \"Spymaster\"\n                    ? \" I am the Spymaster!\"\n                    : \" Spymaster\"}\n                </span>\n              </label>\n              <button id=\"next-game\" className=\"button\" onClick={this.newGame}>\n                New Game!\n              </button>\n            </div>\n          </div>\n\n          <Board\n            cards={this.props.game.cards}\n            cardClick={(i) => this.cardClick(i)}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  /* Helper/dispatch functions */\n  /* Client actions */\n  // Score CSS classes and info\n  createScoreboard() {\n    let firstTeamColor;\n    let firstTeamScore;\n    let secondTeamColor;\n    let secondTeamScore;\n    if (this.props.game.blueTeamFirst) {\n      firstTeamColor = \"blue\";\n      firstTeamScore = this.props.game.blueCards;\n      secondTeamColor = \"red\";\n      secondTeamScore = this.props.game.redCards;\n    } else {\n      firstTeamColor = \"red\";\n      firstTeamScore = this.props.game.redCards;\n      secondTeamColor = \"blue\";\n      secondTeamScore = this.props.game.blueCards;\n    }\n\n    return {\n      firstTeamColor,\n      firstTeamScore,\n      secondTeamColor,\n      secondTeamScore,\n    };\n  }\n\n  changeRole(event) {\n    let el = event.target;\n\n    this.props.dispatch(changeRole(el.value));\n  }\n\n  /* Server actions */\n  loadGame(gameName) {\n    this.props.dispatch(loadGame(gameName));\n  }\n\n  newGame() {\n    this.props.dispatch(startNewGame(this.props.game.gameName));\n  }\n\n  cardClick(cardIndex) {\n    const teamClicked = this.props.game.blueTurn ? \"Blue\" : \"Red\";\n    this.props.dispatch(cardClick(this.props.game.gameName, cardIndex, teamClicked));\n  }\n\n  endTurn() {\n    this.props.dispatch(endTurn(this.props.game.gameName));\n  }\n}\n\nexport default connect(stateMap)(Game);\n"]},"metadata":{},"sourceType":"module"}